
// Generated from TABL.g4 by ANTLR 4.13.2


#include "TABLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TABLLexerStaticData final {
  TABLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TABLLexerStaticData(const TABLLexerStaticData&) = delete;
  TABLLexerStaticData(TABLLexerStaticData&&) = delete;
  TABLLexerStaticData& operator=(const TABLLexerStaticData&) = delete;
  TABLLexerStaticData& operator=(TABLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag tabllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<TABLLexerStaticData> tabllexerLexerStaticData = nullptr;

void tabllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (tabllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(tabllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TABLLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "TBLNAME", "WS", "COMMENT", "COMMENTLINE", 
      "VALUE", "STRING", "INTEGER", "FLOAT", "CHAR"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'TABL.start'", "'TABL.end'", "'make'", "'import'", "'.tbl'", 
      "'as'", "'insert'", "'column'", "'for'", "'type'", "'name'", "'default'", 
      "'auto'", "'row'", "'print'", "'delete'", "'sort'", "'by'", "'filter'", 
      "'data'", "'to'", "'.'", "'edit'", "'export'", "'table'", "'++'", 
      "'--'", "'+'", "'-'", "';'", "'INT'", "'STRING'", "'CHAR'", "'FLOAT'", 
      "'['", "','", "']'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "TBLNAME", "WS", "COMMENT", "COMMENTLINE", "VALUE", 
      "STRING", "INTEGER", "FLOAT", "CHAR"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,46,347,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
  	6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
  	1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
  	11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
  	14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
  	17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
  	19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,
  	26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
  	33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,4,37,276,8,37,11,37,12,37,
  	277,1,37,5,37,281,8,37,10,37,12,37,284,9,37,1,38,4,38,287,8,38,11,38,
  	12,38,288,1,38,1,38,1,39,1,39,1,39,1,39,5,39,297,8,39,10,39,12,39,300,
  	9,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,311,8,40,10,40,
  	12,40,314,9,40,1,40,1,40,1,41,3,41,319,8,41,1,41,1,41,3,41,323,8,41,1,
  	41,3,41,326,8,41,1,41,1,41,3,41,330,8,41,1,42,4,42,333,8,42,11,42,12,
  	42,334,1,43,4,43,338,8,43,11,43,12,43,339,1,44,1,44,1,44,1,44,1,45,1,
  	45,1,298,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
  	12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
  	47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
  	35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
  	1,0,7,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,
  	2,0,34,34,8220,8220,2,0,34,34,8221,8221,3,0,48,57,65,90,97,122,358,0,
  	1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
  	0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
  	23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
  	0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
  	0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
  	55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
  	0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
  	0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
  	87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,104,1,0,0,0,5,113,
  	1,0,0,0,7,118,1,0,0,0,9,125,1,0,0,0,11,130,1,0,0,0,13,133,1,0,0,0,15,
  	140,1,0,0,0,17,147,1,0,0,0,19,151,1,0,0,0,21,156,1,0,0,0,23,161,1,0,0,
  	0,25,169,1,0,0,0,27,174,1,0,0,0,29,178,1,0,0,0,31,184,1,0,0,0,33,191,
  	1,0,0,0,35,196,1,0,0,0,37,199,1,0,0,0,39,206,1,0,0,0,41,211,1,0,0,0,43,
  	214,1,0,0,0,45,216,1,0,0,0,47,221,1,0,0,0,49,228,1,0,0,0,51,234,1,0,0,
  	0,53,237,1,0,0,0,55,240,1,0,0,0,57,242,1,0,0,0,59,244,1,0,0,0,61,246,
  	1,0,0,0,63,250,1,0,0,0,65,257,1,0,0,0,67,262,1,0,0,0,69,268,1,0,0,0,71,
  	270,1,0,0,0,73,272,1,0,0,0,75,275,1,0,0,0,77,286,1,0,0,0,79,292,1,0,0,
  	0,81,306,1,0,0,0,83,329,1,0,0,0,85,332,1,0,0,0,87,337,1,0,0,0,89,341,
  	1,0,0,0,91,345,1,0,0,0,93,94,5,84,0,0,94,95,5,65,0,0,95,96,5,66,0,0,96,
  	97,5,76,0,0,97,98,5,46,0,0,98,99,5,115,0,0,99,100,5,116,0,0,100,101,5,
  	97,0,0,101,102,5,114,0,0,102,103,5,116,0,0,103,2,1,0,0,0,104,105,5,84,
  	0,0,105,106,5,65,0,0,106,107,5,66,0,0,107,108,5,76,0,0,108,109,5,46,0,
  	0,109,110,5,101,0,0,110,111,5,110,0,0,111,112,5,100,0,0,112,4,1,0,0,0,
  	113,114,5,109,0,0,114,115,5,97,0,0,115,116,5,107,0,0,116,117,5,101,0,
  	0,117,6,1,0,0,0,118,119,5,105,0,0,119,120,5,109,0,0,120,121,5,112,0,0,
  	121,122,5,111,0,0,122,123,5,114,0,0,123,124,5,116,0,0,124,8,1,0,0,0,125,
  	126,5,46,0,0,126,127,5,116,0,0,127,128,5,98,0,0,128,129,5,108,0,0,129,
  	10,1,0,0,0,130,131,5,97,0,0,131,132,5,115,0,0,132,12,1,0,0,0,133,134,
  	5,105,0,0,134,135,5,110,0,0,135,136,5,115,0,0,136,137,5,101,0,0,137,138,
  	5,114,0,0,138,139,5,116,0,0,139,14,1,0,0,0,140,141,5,99,0,0,141,142,5,
  	111,0,0,142,143,5,108,0,0,143,144,5,117,0,0,144,145,5,109,0,0,145,146,
  	5,110,0,0,146,16,1,0,0,0,147,148,5,102,0,0,148,149,5,111,0,0,149,150,
  	5,114,0,0,150,18,1,0,0,0,151,152,5,116,0,0,152,153,5,121,0,0,153,154,
  	5,112,0,0,154,155,5,101,0,0,155,20,1,0,0,0,156,157,5,110,0,0,157,158,
  	5,97,0,0,158,159,5,109,0,0,159,160,5,101,0,0,160,22,1,0,0,0,161,162,5,
  	100,0,0,162,163,5,101,0,0,163,164,5,102,0,0,164,165,5,97,0,0,165,166,
  	5,117,0,0,166,167,5,108,0,0,167,168,5,116,0,0,168,24,1,0,0,0,169,170,
  	5,97,0,0,170,171,5,117,0,0,171,172,5,116,0,0,172,173,5,111,0,0,173,26,
  	1,0,0,0,174,175,5,114,0,0,175,176,5,111,0,0,176,177,5,119,0,0,177,28,
  	1,0,0,0,178,179,5,112,0,0,179,180,5,114,0,0,180,181,5,105,0,0,181,182,
  	5,110,0,0,182,183,5,116,0,0,183,30,1,0,0,0,184,185,5,100,0,0,185,186,
  	5,101,0,0,186,187,5,108,0,0,187,188,5,101,0,0,188,189,5,116,0,0,189,190,
  	5,101,0,0,190,32,1,0,0,0,191,192,5,115,0,0,192,193,5,111,0,0,193,194,
  	5,114,0,0,194,195,5,116,0,0,195,34,1,0,0,0,196,197,5,98,0,0,197,198,5,
  	121,0,0,198,36,1,0,0,0,199,200,5,102,0,0,200,201,5,105,0,0,201,202,5,
  	108,0,0,202,203,5,116,0,0,203,204,5,101,0,0,204,205,5,114,0,0,205,38,
  	1,0,0,0,206,207,5,100,0,0,207,208,5,97,0,0,208,209,5,116,0,0,209,210,
  	5,97,0,0,210,40,1,0,0,0,211,212,5,116,0,0,212,213,5,111,0,0,213,42,1,
  	0,0,0,214,215,5,46,0,0,215,44,1,0,0,0,216,217,5,101,0,0,217,218,5,100,
  	0,0,218,219,5,105,0,0,219,220,5,116,0,0,220,46,1,0,0,0,221,222,5,101,
  	0,0,222,223,5,120,0,0,223,224,5,112,0,0,224,225,5,111,0,0,225,226,5,114,
  	0,0,226,227,5,116,0,0,227,48,1,0,0,0,228,229,5,116,0,0,229,230,5,97,0,
  	0,230,231,5,98,0,0,231,232,5,108,0,0,232,233,5,101,0,0,233,50,1,0,0,0,
  	234,235,5,43,0,0,235,236,5,43,0,0,236,52,1,0,0,0,237,238,5,45,0,0,238,
  	239,5,45,0,0,239,54,1,0,0,0,240,241,5,43,0,0,241,56,1,0,0,0,242,243,5,
  	45,0,0,243,58,1,0,0,0,244,245,5,59,0,0,245,60,1,0,0,0,246,247,5,73,0,
  	0,247,248,5,78,0,0,248,249,5,84,0,0,249,62,1,0,0,0,250,251,5,83,0,0,251,
  	252,5,84,0,0,252,253,5,82,0,0,253,254,5,73,0,0,254,255,5,78,0,0,255,256,
  	5,71,0,0,256,64,1,0,0,0,257,258,5,67,0,0,258,259,5,72,0,0,259,260,5,65,
  	0,0,260,261,5,82,0,0,261,66,1,0,0,0,262,263,5,70,0,0,263,264,5,76,0,0,
  	264,265,5,79,0,0,265,266,5,65,0,0,266,267,5,84,0,0,267,68,1,0,0,0,268,
  	269,5,91,0,0,269,70,1,0,0,0,270,271,5,44,0,0,271,72,1,0,0,0,272,273,5,
  	93,0,0,273,74,1,0,0,0,274,276,7,0,0,0,275,274,1,0,0,0,276,277,1,0,0,0,
  	277,275,1,0,0,0,277,278,1,0,0,0,278,282,1,0,0,0,279,281,7,1,0,0,280,279,
  	1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,76,1,0,0,
  	0,284,282,1,0,0,0,285,287,7,2,0,0,286,285,1,0,0,0,287,288,1,0,0,0,288,
  	286,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,6,38,0,0,291,78,1,
  	0,0,0,292,293,5,47,0,0,293,294,5,42,0,0,294,298,1,0,0,0,295,297,9,0,0,
  	0,296,295,1,0,0,0,297,300,1,0,0,0,298,299,1,0,0,0,298,296,1,0,0,0,299,
  	301,1,0,0,0,300,298,1,0,0,0,301,302,5,42,0,0,302,303,5,47,0,0,303,304,
  	1,0,0,0,304,305,6,39,0,0,305,80,1,0,0,0,306,307,5,47,0,0,307,308,5,47,
  	0,0,308,312,1,0,0,0,309,311,8,3,0,0,310,309,1,0,0,0,311,314,1,0,0,0,312,
  	310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,316,6,
  	40,0,0,316,82,1,0,0,0,317,319,7,4,0,0,318,317,1,0,0,0,318,319,1,0,0,0,
  	319,322,1,0,0,0,320,323,3,85,42,0,321,323,5,45,0,0,322,320,1,0,0,0,322,
  	321,1,0,0,0,323,325,1,0,0,0,324,326,7,5,0,0,325,324,1,0,0,0,325,326,1,
  	0,0,0,326,330,1,0,0,0,327,330,3,87,43,0,328,330,3,89,44,0,329,318,1,0,
  	0,0,329,327,1,0,0,0,329,328,1,0,0,0,330,84,1,0,0,0,331,333,7,6,0,0,332,
  	331,1,0,0,0,333,334,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,86,1,
  	0,0,0,336,338,7,1,0,0,337,336,1,0,0,0,338,339,1,0,0,0,339,337,1,0,0,0,
  	339,340,1,0,0,0,340,88,1,0,0,0,341,342,3,87,43,0,342,343,5,46,0,0,343,
  	344,3,87,43,0,344,90,1,0,0,0,345,346,7,0,0,0,346,92,1,0,0,0,12,0,277,
  	282,288,298,312,318,322,325,329,334,339,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  tabllexerLexerStaticData = std::move(staticData);
}

}

TABLLexer::TABLLexer(CharStream *input) : Lexer(input) {
  TABLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *tabllexerLexerStaticData->atn, tabllexerLexerStaticData->decisionToDFA, tabllexerLexerStaticData->sharedContextCache);
}

TABLLexer::~TABLLexer() {
  delete _interpreter;
}

std::string TABLLexer::getGrammarFileName() const {
  return "TABL.g4";
}

const std::vector<std::string>& TABLLexer::getRuleNames() const {
  return tabllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TABLLexer::getChannelNames() const {
  return tabllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TABLLexer::getModeNames() const {
  return tabllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TABLLexer::getVocabulary() const {
  return tabllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TABLLexer::getSerializedATN() const {
  return tabllexerLexerStaticData->serializedATN;
}

const atn::ATN& TABLLexer::getATN() const {
  return *tabllexerLexerStaticData->atn;
}




void TABLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  tabllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(tabllexerLexerOnceFlag, tabllexerLexerInitialize);
#endif
}
